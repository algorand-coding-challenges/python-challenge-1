#pragma version 10

smart_contracts.personal_vault.contract.PersonalVault.approval_program:
    // smart_contracts/personal_vault/contract.py:14
    // class PersonalVault(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@6
    method "deposit(pay)uint64"
    method "withdraw()uint64"
    txna ApplicationArgs 0
    match main_deposit_route@2 main_withdraw_route@3
    err // reject transaction

main_deposit_route@2:
    // smart_contracts/personal_vault/contract.py:22
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/personal_vault/contract.py:14
    // class PersonalVault(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/personal_vault/contract.py:22
    // @arc4.abimethod()
    callsub deposit
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_withdraw_route@3:
    // smart_contracts/personal_vault/contract.py:38
    // @arc4.abimethod(allow_actions=["CloseOut"])
    txn OnCompletion
    int CloseOut
    ==
    assert // OnCompletion is CloseOut
    txn ApplicationID
    assert // is not creating
    callsub withdraw
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@6:
    // smart_contracts/personal_vault/contract.py:14
    // class PersonalVault(ARC4Contract):
    txn OnCompletion
    switch main_create@7 main_opt_in_to_app@8
    err // reject transaction

main_create@7:
    // smart_contracts/personal_vault/contract.py:14
    // class PersonalVault(ARC4Contract):
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_opt_in_to_app@8:
    // smart_contracts/personal_vault/contract.py:18
    // @arc4.baremethod(allow_actions=["OptIn"])
    txn ApplicationID
    assert // is not creating
    // smart_contracts/personal_vault/contract.py:18-19
    // @arc4.baremethod(allow_actions=["OptIn"])
    // def opt_in_to_app(self) -> None:
    callsub opt_in_to_app
    int 1
    return


// smart_contracts.personal_vault.contract.PersonalVault.deposit(ptxn: uint64) -> uint64:
deposit:
    // smart_contracts/personal_vault/contract.py:22-23
    // @arc4.abimethod()
    // def deposit(self, ptxn: gtxn.PaymentTransaction) -> UInt64:
    proto 1 1
    // smart_contracts/personal_vault/contract.py:24
    // assert ptxn.amount > 0, "Deposit amount must be greater than 0"
    frame_dig -1
    gtxns Amount
    dup
    assert // Deposit amount must be greater than 0
    // smart_contracts/personal_vault/contract.py:26
    // ptxn.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/personal_vault/contract.py:25-27
    // assert (
    //     ptxn.receiver == Global.current_application_address
    // ), "Deposit receiver must be the contract address"
    assert // Deposit receiver must be the contract address
    // smart_contracts/personal_vault/contract.py:28
    // assert ptxn.sender == Txn.sender, "Deposit sender must be the caller"
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Deposit sender must be the caller
    // smart_contracts/personal_vault/contract.py:30
    // Txn.sender,Global.current_application_id
    txn Sender
    global CurrentApplicationID
    // smart_contracts/personal_vault/contract.py:29-31
    // assert op.app_opted_in(
    //     Txn.sender,Global.current_application_id
    // ), "Deposit sender must opt-in to the app first."
    app_opted_in
    assert // Deposit sender must opt-in to the app first.
    // smart_contracts/personal_vault/contract.py:33
    // self.balance[Txn.sender] += ptxn.amount
    txn Sender
    int 0
    byte "balance"
    app_local_get_ex
    assert // check balance exists for account
    +
    txn Sender
    byte "balance"
    uncover 2
    app_local_put
    // smart_contracts/personal_vault/contract.py:34
    // user_balance = self.balance[Txn.sender]
    txn Sender
    int 0
    byte "balance"
    app_local_get_ex
    assert // check balance exists for account
    // smart_contracts/personal_vault/contract.py:36
    // return user_balance
    retsub


// smart_contracts.personal_vault.contract.PersonalVault.withdraw() -> uint64:
withdraw:
    // smart_contracts/personal_vault/contract.py:38-39
    // @arc4.abimethod(allow_actions=["CloseOut"])
    // def withdraw(self) -> UInt64:
    proto 0 1
    // smart_contracts/personal_vault/contract.py:40
    // userBalance = self.balance[Txn.sender]
    txn Sender
    int 0
    byte "balance"
    app_local_get_ex
    assert // check balance exists for account
    // smart_contracts/personal_vault/contract.py:42-47
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     sender=Global.current_application_address,
    //     amount=userBalance,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/personal_vault/contract.py:43
    // receiver=Txn.sender,
    txn Sender
    // smart_contracts/personal_vault/contract.py:44
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/personal_vault/contract.py:46
    // fee=0,
    int 0
    itxn_field Fee
    dig 2
    itxn_field Amount
    itxn_field Sender
    itxn_field Receiver
    // smart_contracts/personal_vault/contract.py:42
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/personal_vault/contract.py:42-47
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     sender=Global.current_application_address,
    //     amount=userBalance,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/personal_vault/contract.py:49
    // return userBalance
    retsub


// smart_contracts.personal_vault.contract.PersonalVault.opt_in_to_app() -> void:
opt_in_to_app:
    // smart_contracts/personal_vault/contract.py:18-19
    // @arc4.baremethod(allow_actions=["OptIn"])
    // def opt_in_to_app(self) -> None:
    proto 0 0
    // smart_contracts/personal_vault/contract.py:20
    // self.balance[Txn.sender] = UInt64(0)
    txn Sender
    byte "balance"
    int 0
    app_local_put
    retsub
